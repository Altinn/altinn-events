name: Use Case - AT

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
  - cron: '*/15 * * * *'

jobs:
  AT22:
    environment: AT22
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install xk6 and dependencies
      run: |
        cd test/k6
        echo "Download go"
        curl -LO https://go.dev/dl/go1.18.3.linux-amd64.tar.gz
        echo "Unpack go"
        rm -f ./k6
        sudo rm -rf ~/go && tar -C $HOME/ -xzf go1.18.3.linux-amd64.tar.gz
        echo "Export path"
        export GOPATH=$HOME/go
        export PATH=$PATH:$HOME/go/bin
        echo "Show go version"
        go version
        echo "Install k6"
        go install go.k6.io/k6@latest
        echo "Show k6 version"
        k6 version
        echo "Install xk6"
        go install go.k6.io/xk6/cmd/xk6@latest
        echo "Rebuid k6 with timescale"
        xk6 build --with github.com/grafana/xk6-output-timescaledb

    - name: Run app-events use case tests
      run:  |
              cd test/k6
              docker-compose run k6 run /src/tests/app-events.js -e env=${{ vars.ENV }} -e tokenGeneratorUserName=${{ secrets.TOKENGENERATOR_USERNAME }} -e tokenGeneratorUserPwd=${{ secrets.TOKENGENERATOR_USERPASSWORD }} -e app=apps-test -e userId=${{ secrets.USER_ID }} -e partyId=${{ secrets.PARTY_ID }} -e personNumber=${{ secrets.PERSON_NUMBER }}
    - name: Run events use case tests
      run:  |
              cd test/k6
              docker-compose run k6 run /src/tests/events.js -e env=${{ vars.ENV }} -e tokenGeneratorUserName=${{ secrets.TOKENGENERATOR_USERNAME }} -e tokenGeneratorUserPwd=${{ secrets.TOKENGENERATOR_USERPASSWORD }} -o timescaledb=${{ secrets.PG_CONNECTIONSTRING }}
    - name: Run subscription use case tests
      run:  |
              cd test/k6
              docker-compose run k6 run /src/tests/subscriptions.js -e env=${{ vars.ENV }} -e tokenGeneratorUserName=${{ secrets.TOKENGENERATOR_USERNAME }} -e tokenGeneratorUserPwd=${{ secrets.TOKENGENERATOR_USERPASSWORD }} -e app=apps-test -e webhookEndpoint=${{ secrets.WEBHOOK_ENDPOINT }}

  report-status:
    name: Report status
    runs-on: ubuntu-latest
#    needs: [AT21, AT22, AT23, AT24]
    needs: AT22
#    if: always() && contains(join(needs.*.result, ','), 'failure')
    steps:
      - name: Build failure report
        run: |
          report=":warning: FileScan use case test failure in AT :warning: \n See environment(s) listed below: \n"

          if [ ${{ needs.AT21.result }} = 'failure' ]; then
            report+="AT21 \r\n"
          fi

          if [ ${{ needs.AT22.result }} = 'failure' ]; then
            report+="AT22 \r\n"
          fi

          if [ ${{ needs.AT23.result }} = 'failure' ]; then
            report+="AT23 \r\n"
          fi

          if [ ${{ needs.AT24.result }} = 'failure' ]; then
            report+="AT24 \r\n"
          fi

          report+="\n Workflow available here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "stepreport="$report >> $GITHUB_ENV

#      - name: Report failure to Slack
#        id: slack
#        uses: slackapi/slack-github-action@v1.23.0
#        with:
#          payload: |
#              {
#                "text": "${{ env.stepreport }}"
#              }
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_TEST }}

